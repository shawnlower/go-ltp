syntax = "proto3";

// Compile w/ e.g.:
// $ protoc ltp.proto --go_out=plugins=grpc:.

package proto;

import "google/protobuf/timestamp.proto";

message Empty {}

// Health check per docs at
// https://github.com/grpc/grpc/blob/master/doc/health-checking.md

message HealthCheckRequest {
    string service = 1;
}

message HealthCheckResponse {
    enum ServingStatus {
        UNKNOWN = 0;
        SERVING = 1;
        NOT_SERVING = 2;
    }
    ServingStatus status = 1;
}

service Health {
    rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
}

// Main server definition


message VersionResponse {
    string VersionString = 1;
}

message Type {
    string IRI = 1;
    string Label = 2;
    repeated Type Parents = 3;
    repeated Type Children = 4;
}

message Item {
    string IRI = 1;
    repeated string Types = 2;
    repeated Statement Statements = 3;
}

// A semantic 'statement' about the world. Can generally be viewed as
// an RDF triple, with an additional 'Scope', used for provenance.
// This can be implemented as a named graph, where the graph name (or label)
// is used for this purpose.
//
// See also:
// <http://patterns.dataincubator.org/book/named-graphs.html>
message Statement {
    string Subject = 1;
    string Predicate = 2;
    string Object = 3;
    string Label = 4;
}

// The scope bounds the set of statements or assertions being made by
// an agent.
// Example: scope := &Scope{Time.now(), "ltp_client.shawnlower.net", nil}
message Scope {
    string agent = 1;
    google.protobuf.Timestamp assertionTime = 2;
}

message CreateItemRequest {
    repeated string Types = 1;
    repeated Statement Statements = 2;
}

message CreateItemResponse {
    Item item = 1;
}

message GetItemRequest {
    string IRI = 1;
}

message GetItemResponse {
    Item item = 1;
}

message GetTypeRequest {
    string IRI = 1;
}

message GetTypeResponse {
    Type Type = 1;
}

message ServerInfoResponse {
    map<string, string> InfoItems = 1;
}

service API {
    rpc CreateItem(CreateItemRequest) returns (CreateItemResponse);
    rpc GetItem(GetItemRequest) returns (GetItemResponse);
    rpc GetVersion(Empty) returns (VersionResponse);
    rpc GetServerInfo(Empty) returns (ServerInfoResponse);
}
